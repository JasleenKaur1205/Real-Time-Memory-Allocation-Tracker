class MetricAggregator:
    """
    Aggregates raw system metrics using a fixed-size sliding window.
    Computes statistical measures: average, minimum, maximum, and standard deviation.
    """
    
    def __init__(self, window_size=5):
        """
        Initializes the MetricAggregator with a fixed-size sliding window.
        
        Parameters:
            window_size (int): The number of recent samples to aggregate.
        """
        self.window_size = window_size
        # Create deques for CPU and memory percentages with fixed window size
        self.metrics_windows = {
            "cpu_percent": collections.deque(maxlen=window_size),
            "memory_percent": collections.deque(maxlen=window_size)
        }
         def add_raw_metrics(self, raw_metrics):
        """
        Adds raw metric values to the sliding windows.
        
        Parameters:
            raw_metrics (dict): Must include nested keys:
                - "cpu": {"overall_cpu_percent": float, ...}
                - "memory": {"memory_percent": float, ...}
        
        Raises:
            ValueError: If the required keys are missing.
        """
        try:
            # Adjust to the nested structure from collect_all_metrics()
            cpu = raw_metrics["cpu"]["overall_cpu_percent"]
            memory = raw_metrics["memory"]["memory_percent"]
        except KeyError as e:
            raise ValueError("Missing required metric key: " + str(e))
        
        # Append the values into their respective sliding windows
        self.metrics_windows["cpu_percent"].append(cpu)
        self.metrics_windows["memory_percent"].append(memory)
